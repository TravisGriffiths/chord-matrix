// Generated by CoffeeScript 1.3.3
(function() {
  var cleanByteCount, cleanNumber, cleanNumberDefaultLocale, counter, formatDate, getAxisScale, getSD, getSpaces, getSquareMatrix, getUniqueID, localInfo, sortNumbers, toBoolean, toCurrency, toCurrencyDefaultLocale, toDate, toDateTime, toHumanFloat, toHumanInt, toHumanNumber, toPercentage;

  window.utilities = {};

  cleanNumber = function(number, locale) {
    var mag_index, magnitude, radix, radix_cutoff, result, sign, symbols, working;
    if (locale == null) {
      locale = 'us';
    }
    symbols = utilities.localInfo[locale];
    number = Number(number);
    sign = "";
    if (number < 0) {
      sign = "-";
      number *= -1;
    }
    magnitude = ["", "K", "M", "B", "T", "Q"];
    mag_index = 0;
    while (number >= 1000) {
      number /= 1000;
      mag_index += 1;
    }
    working = String(number);
    radix = working.indexOf('.');
    if (radix < 0) {
      radix = false;
    }
    if (radix && (working.length - radix > 2)) {
      radix_cutoff = 3;
      working = working.substring(0, radix + radix_cutoff);
    }
    result = working + magnitude[mag_index];
    result.replace(".", symbols.radix);
    return result = sign + result;
  };

  window.utilities['cleanNumber'] = cleanNumber;

  cleanNumberDefaultLocale = function(number) {
    return cleanNumber(number);
  };

  window.utilities['cleanNumberDefaultLocale'] = cleanNumberDefaultLocale;

  cleanByteCount = function(number) {
    var mag_index, magnitude, radix, radix_cutoff, result, sign, working;
    number = Number(number);
    sign = "";
    if (number < 0) {
      sign = "-";
      number *= -1;
    }
    magnitude = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB"];
    mag_index = 0;
    while (number >= 1000) {
      number /= 1000;
      mag_index += 1;
    }
    working = String(number);
    radix = working.indexOf('.');
    if (radix < 0) {
      radix = false;
    }
    if (radix && (working.length - radix > 2)) {
      radix_cutoff = 3;
      working = working.substring(0, radix + radix_cutoff);
    }
    return result = sign + working + magnitude[mag_index];
  };

  window.utilities['cleanByteCount'] = cleanByteCount;

  localInfo = {
    'us': {
      'currency': '$',
      'radix': '.',
      'seperator': ','
    },
    'br': {
      'currency': 'R$',
      'radix': ',',
      'seperator': '.'
    },
    'eu': {
      'currency': 'â‚¬',
      'radix': ',',
      'seperator': '.'
    }
  };

  window.utilities['localInfo'] = localInfo;

  toCurrency = function(number, use_seperators, locale) {
    var result, sign, symbols;
    if (locale == null) {
      locale = 'us';
    }
    symbols = utilities.localInfo[locale];
    sign = "";
    if (number < 0) {
      sign = "-";
      number *= -1;
    }
    return result = sign + symbols.currency + toHumanNumber(number, [use_seperators, true, locale]);
  };

  window.utilities['toCurrency'] = toCurrency;

  toCurrencyDefaultLocale = function(number) {
    return toCurrency(number);
  };

  window.utilities['toCurrencyDefaultLocale'] = toCurrencyDefaultLocale;

  toHumanNumber = function(number, args) {
    var block, blocks, decimal, decimals, locale, result, separator_to_use, sign, symbols, use_seperators;
    number = Number(number);
    sign = "";
    if (number < 0) {
      sign = "-";
      number *= -1;
    }
    if (args == null) {
      args = [];
    }
    use_seperators = args[0] != null ? args[0] : true;
    decimal = args[1] != null ? args[1] : false;
    locale = args[2] != null ? args[2] : 'us';
    symbols = utilities.localInfo[locale];
    if (number >= 1000000000) {
      return cleanNumber(number, locale);
    } else {
      decimals = decimal ? parseFloat(Number(number)).toFixed(2).split(".")[1] : "";
      number = parseInt(Number(number));
      blocks = [];
      result = "";
      while (number >= 1000) {
        if ((number % 1000) < 100) {
          block = String(number % 1000);
          while (block.length < 3) {
            block = '0' + block;
          }
          blocks.push(block);
        } else {
          blocks.push(number % 1000);
        }
        number = Math.floor(number / 1000);
      }
      blocks.push(number);
      separator_to_use = use_seperators ? symbols.seperator : '';
      result += blocks.reverse().join(separator_to_use);
      if (decimal) {
        result += symbols.radix + decimals;
      }
      result = sign + result;
      return result;
    }
  };

  window.utilities['toHumanNumber'] = toHumanNumber;

  toHumanFloat = function(number, locale) {
    return toHumanNumber(number, [true, true, locale]);
  };

  window.utilities['toHumanFloat'] = toHumanFloat;

  toHumanInt = function(number, locale) {
    return toHumanNumber(number, [true, false, locale]);
  };

  window.utilities['toHumanInt'] = toHumanInt;

  toBoolean = function(value) {
    if (value) {
      return "Yes";
    } else {
      return "No";
    }
  };

  window.utilities['toBoolean'] = toBoolean;

  toDate = function(dateObj) {
    if (typeof dateObj === "string") {
      return new Date(dateObj);
    } else {
      return new Date(dateObj.year, dateObj.month - 1, dateObj.day);
    }
  };

  window.utilities['toDate'] = toDate;

  toDateTime = function(dateTimeObj) {
    return new Date(dateTimeObj);
  };

  window.utilities['toDateTime'] = toDateTime;

  formatDate = function(dateObj, format) {
    if (format == null) {
      format = "yyyy/MM/dd";
    }
    return toDate(dateObj).toString(format);
  };

  window.utilities['formatDate'] = formatDate;

  /*
    GetAxisScale takes an array and returns the best match in terms of a scale that evenly spaces the points given
    Examples:
      [1,2,3,4,5] -> "linear"
      [1, 10, 100] -> "logrithmic"
  */


  getAxisScale = function(axis) {
    var line_map, line_scale, log_map, log_scale;
    axis = _.toArray(axis);
    line_scale = d3.scale.linear();
    log_scale = d3.scale.log();
    line_map = _.map(axis, function(point) {
      return line_scale(point);
    });
    log_map = _.map(axis, function(point) {
      return log_scale(point);
    });
    if (getSD(getSpaces(line_map)) > getSD(getSpaces(log_map))) {
      return "log";
    } else {
      return "linear";
    }
  };

  window.utilities['getAxisScale'] = getAxisScale;

  /*
    getSD returns the standard deviation in for numbers in an array
  */


  getSD = function(set) {
    var item, mean, offsets, _i, _len;
    if (!_.isArray(set) || set.length === 0) {
      return -1;
    }
    mean = d3.mean(set);
    if (!_.isNumber(mean)) {
      return -1;
    }
    offsets = [];
    for (_i = 0, _len = set.length; _i < _len; _i++) {
      item = set[_i];
      offsets.push(Math.pow(Number(item) - mean, 2));
    }
    return Math.pow(d3.sum(offsets) / set.length, 0.5);
  };

  window.utilities['getSD'] = getSD;

  /*
    getSpaces is a method for getting the spaces between array values [1, 2, 3] -> [1, 1]
  */


  getSpaces = function(set) {
    var item, previous, result_set, _i, _len;
    set = set.sort();
    result_set = [];
    previous = null;
    for (_i = 0, _len = set.length; _i < _len; _i++) {
      item = set[_i];
      if (previous) {
        result_set.push(item - previous);
      }
      previous = item;
    }
    return result_set;
  };

  window.utilities['getSpaces'] = getSpaces;

  /*
    Counter returns a simple function that after setting a start point will increment by one for each time it is called.
    c = utilities.counter(0) -> returns function
    c() -> 0
    c() -> 1
    c() -> 2
  */


  counter = function(start_number) {
    start_number -= 1;
    return function() {
      return start_number += 1;
    };
  };

  window.utilities['counter'] = counter;

  /*
    Make Unique ID returns miliseconds since epoc + a random number string to guantee uniqueness
  */


  getUniqueID = function() {
    var c, d, t;
    c = counter(0);
    d = new Date();
    t = d.getTime();
    return String(Math.floor(Math.random(c()) * 100000)) + String(t);
  };

  window.utilities['getUniqueID'] = getUniqueID;

  /*
    Simple testing function returns a random square matrix
  */


  getSquareMatrix = function(size) {
    var c, col, cols, record, row, _i, _j;
    c = counter(0);
    cols = [];
    for (col = _i = 1; 1 <= size ? _i <= size : _i >= size; col = 1 <= size ? ++_i : --_i) {
      row = [];
      for (record = _j = 1; 1 <= size ? _j <= size : _j >= size; record = 1 <= size ? ++_j : --_j) {
        row.push(Math.floor(Math.random(c()) * 1000));
      }
      cols.push(row);
    }
    return cols;
  };

  window.utilities['getSquareMatrix'] = getSquareMatrix;

  sortNumbers = function(a, b) {
    if (Number(a) === Number(b)) {
      return 0;
    } else {
      if (Number(a) < Number(b)) {
        return -1;
      } else {
        return 1;
      }
    }
  };

  window.utilities.sortNumbers = sortNumbers;

  toPercentage = function(float) {
    return utilities.toHumanFloat(float *= 100) + "%";
  };

  window.utilities.toPercentage = toPercentage;

}).call(this);
